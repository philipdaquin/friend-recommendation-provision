
#   Deploying Postgresql on K8s
#   - Create the Volumes
#   - Create database secrets 
#   - Create Deployment resource 
#   - Create the service resource 

# Persistent Volume
# - Needed to persist this data so that an application 
# can access and use it anytime. 
# - When deploying a db service to k8s, a pod is set to a volume to persist your data 
#


apiVersion: v1
kind: Namespace
metadata:
  name:  postgres-db
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresdb-volume
  namespace: postgres-db

  labels:
    type: local
    app: postgresdb

spec:
  capacity:
    # PV storage capacity 
    storage: 8Gi
  # Db can write and read from volumes to multiple pods
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: manual
  hostPath:
    path: "data/db"
  
---
#
# Persistent Volume Claim
# TO allow a cluster to request access to the data storage,
# you need to set up a PersistentVolumeClaim (PVC) to the volume
#  
# It ensures the pods created within the designated cluster can access a volume to store data 
#
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-postgresdb-claim
  namespace: postgres-db

spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi

---
# Database Config
# Databases require access controll using password and users.
# - You can use Kubernetes to create these credential
# - To do this, use ConfigMap to create environment variables to store the database configurations
#
#
apiVersion: v1
# Kind for kubernets ConfigMap
kind: ConfigMap
metadata:
  # Name your ConfigMap
  name: db-secret-credentials
  namespace: postgres-db

  labels:
    app: postgresdb
data:
  # User DB
  POSTGRES_DB: users
  # Db user
  POSTGRES_USER: postgres

  POSTGRES_HOST: localhost

  # Db password
  POSTGRES_PASSWORD: password

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresdb
  namespace: postgres-db

spec:
  selector:
    matchLabels:
      app: postgresdb # has to match .spec.template.metadata.labels
  serviceName: "postgresdb"
  replicas: 1 # by default is 1
  template:
    metadata:
      labels:
        app: postgresdb # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgresdb
        image: postgres
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
          name: postgresdb
        volumeMounts:
        - name: db-data
          # mountPath: /var/lib/postgres/data
          mountPath: /var/lib/postgresql/data
      
      volumes:
        # Volume to claim 
        - name: db-data
          persistentVolumeClaim:  
            claimName: postgresdb-claim
        # config
        - name: postgresdb-config
          configMap: 
            name: postgresdb-config


---
# Service Resource 
# A service exposes a deployment. It providesa stable network  
# endpoint for accessing a cluster.
#
#
apiVersion: v1
kind: Service
metadata:
  name: postgresdb
  namespace: postgres-db

  labels:
    app: postgresdb
spec:
  selector:
    app: postgresdb
  # Choose how to expose your service 
  type: NodePort
  ports:
  - name: postgresdb
    port: 5432 